From 1c3b01604e7a6cf1a06732f0b605214718ee507e Mon Sep 17 00:00:00 2001
From: brrrrrrrrrr <brrrrrrrrrr@brrrrrrrrrr>
Date: Fri, 26 Apr 2024 14:08:56 +0000
Subject: [PATCH] iwd wifi driver

---
 Makefile.common            |   1 +
 configuration.c            |   3 +
 network/drivers_wifi/iwd.c | 288 +++++++++++++++++++++++++++++++++++++
 network/wifi_driver.c      |   1 +
 network/wifi_driver.h      |   1 +
 5 files changed, 294 insertions(+)
 create mode 100644 network/drivers_wifi/iwd.c

diff --git a/Makefile.common b/Makefile.common
index 3277ff0a3e..d87ab8a461 100644
--- a/Makefile.common
+++ b/Makefile.common
@@ -794,6 +794,7 @@ ifeq ($(HAVE_WIFI), 1)
    OBJ += network/wifi_driver.o
    OBJ += tasks/task_wifi.o
    OBJ += network/drivers_wifi/nmcli.o
+   OBJ += network/drivers_wifi/iwd.o
    DEFINES += -DHAVE_WIFI
 endif
 
diff --git a/configuration.c b/configuration.c
index 9e4705a710..db5f0ac925 100644
--- a/configuration.c
+++ b/configuration.c
@@ -241,6 +241,7 @@ enum wifi_driver_enum
 {
    WIFI_CONNMANCTL          = BLUETOOTH_NULL + 1,
    WIFI_NMCLI,
+   WIFI_IWD,
    WIFI_NULL
 };
 
@@ -1326,6 +1327,8 @@ const char *config_get_default_wifi(void)
          return "connmanctl";
       case WIFI_NMCLI:
          return "nmcli";
+      case WIFI_IWD:
+         return "iwd";
       case WIFI_NULL:
          break;
    }
diff --git a/network/drivers_wifi/iwd.c b/network/drivers_wifi/iwd.c
new file mode 100644
index 0000000000..d1f1f3e59a
--- /dev/null
+++ b/network/drivers_wifi/iwd.c
@@ -0,0 +1,288 @@
+/*  RetroArch - A frontend for libretro.
+ *  Copyright (C) 2014-2017 - Jean-Andr√© Santoni
+ *
+ *  RetroArch is free software: you can redistribute it and/or modify it under the terms
+ *  of the GNU General Public License as published by the Free Software Found-
+ *  ation, either version 3 of the License, or (at your option) any later version.
+ *
+ *  RetroArch is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+ *  PURPOSE.  See the GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along with RetroArch.
+ *  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <time.h>
+#include <compat/strl.h>
+#include <file/file_path.h>
+#include <array/rbuf.h>
+#include <string/stdstring.h>
+#include <retro_miscellaneous.h>
+#include <string.h>
+
+#include <libretro.h>
+
+#include "../wifi_driver.h"
+#include "../../retroarch.h"
+#include "../../configuration.h"
+#include "../../verbosity.h"
+
+typedef struct
+{
+   wifi_network_scan_t scan;
+} iwd_t;
+
+static void *iwd_init(void)
+{
+   iwd_t *iwd = (iwd_t*)calloc(1, sizeof(iwd_t));
+   return iwd;
+}
+
+static void iwd_free(void *data)
+{
+   iwd_t *iwd = (iwd_t*)data;
+
+   if (iwd)
+   {
+      if (iwd->scan.net_list)
+         RBUF_FREE(iwd->scan.net_list);
+      free(iwd);
+   }
+}
+
+static bool iwd_start(void *data)
+{
+   return true;
+}
+
+static void iwd_stop(void *data) { }
+
+// check if iwd daemon is running
+// iwctl will block otherwise
+static bool iwd_is_daemon_running()
+{
+   FILE* p = NULL;
+   char line[512];
+   int ret;
+
+   p = popen("pgrep -x /usr/libexec/iwd", "r");
+
+   if (!p)
+      return false;
+
+   while (fgets(line, sizeof(line), p)) {}
+   ret = pclose(p);
+
+   return (WEXITSTATUS(ret) == 0);
+}
+
+static bool iwd_enable(void* data, bool enabled)
+{
+   if (!iwd_is_daemon_running())
+      return false;
+
+   if (enabled)
+      pclose(popen("iwctl device wlan0 set-property Powered on", "r"));
+   else
+      pclose(popen("iwctl device wlan0 set-property Powered off", "r"));
+
+   return true;
+}
+
+static bool iwd_connection_info(void *data, wifi_network_info_t *netinfo)
+{
+   FILE *cmd_file = NULL;
+   char line[512];
+   char *state_key = "State";
+   char *ssid_key = "Connected network";
+   char *key = NULL;
+   char* val = NULL;
+
+   if (!netinfo)
+      return false;
+
+   if (!iwd_is_daemon_running())
+      return false;
+
+   // get list of key, value pairs
+   // check connected, and if so, get ssid
+   // "            State                 connected  "
+   // "            Connected network     <ssid>  "
+   cmd_file = popen("iwctl station wlan0 show | tail -n +5", "r");
+
+   if (!cmd_file)
+       return false;
+
+   if (fgets(line, sizeof(line), cmd_file))
+   {
+      if ((key = strstr(line, state_key)) != NULL)
+      {
+         val = key + strlen(state_key);
+         string_trim_whitespace(val);
+
+         if (strstr(val, "disconnected") != NULL)
+         {
+            pclose(cmd_file);
+            return false;
+         }
+      }
+      else if ((key = strstr(line, ssid_key)) != NULL)
+      {
+         val = key + strlen(ssid_key);
+         string_trim_whitespace(val);
+
+         strlcpy(netinfo->ssid, val, sizeof(netinfo->ssid));
+         netinfo->connected = true;
+
+         pclose(cmd_file);
+         return true;
+      }
+   }
+
+   pclose(cmd_file);
+   return false;
+}
+
+static void iwd_scan(void *data)
+{
+   char line[512];
+   iwd_t *iwd = (iwd_t*)data;
+   FILE *cmd_file = NULL;
+
+   iwd->scan.scan_time = time(NULL);
+
+   if (iwd->scan.net_list)
+      RBUF_FREE(iwd->scan.net_list);
+
+   if (!iwd_is_daemon_running())
+      return; // list will be empty
+
+   // scan for networks
+   // returns immediately, but may take some time to update list
+   pclose(popen("iwctl station wlan0 scan", "r"));
+
+   // parse stdout ssid list
+   // skip 5 line header
+   // strip ANSI color codes
+   // example: "  >   my-ssid                           psk                 ****    "
+   // columns
+   // - 2 space margin
+   // - 4 char is connected (first char will be '>' if connected, ' ' if not)
+   // - 2 space margin
+   // - 32 char ssid
+   // - 2 space margin
+   // - 18 char network type (psk, ..)
+   // - 2 space margin
+   // - 6 char signal strength
+   // total = 2 + 4 + 2 + 32 + 2 + 18 + 2 + 6 = 68 chars wide
+   cmd_file = popen("iwctl station wlan0 get-networks | tail -n +5 | sed -r \"s/[[:cntrl:]]\\[[0-9;]*m//g\"", "r");
+
+   if (!cmd_file)
+       return; // list will be empty
+
+   while (fgets(line, 512, cmd_file))
+   {
+      wifi_network_info_t entry;
+      memset(&entry, 0, sizeof(entry));
+
+      string_trim_whitespace(line);
+
+      if (!line || line[0] == '\0')
+         continue;
+
+      // check if connected
+      // > now at char 0 because trim whitespace
+      if (line[0] == '>')
+      {
+         entry.connected = true;
+         line[0] = ' ';
+         string_trim_whitespace(line);
+      }
+
+      // get ssid
+      // ssid now at char 0 because trim whitespace
+      // column at least 32 chars wide
+      strlcpy(entry.ssid, line, sizeof(entry.ssid));
+      string_trim_whitespace_right(entry.ssid); // ssid cannot have trailing whitespace
+
+      RBUF_PUSH(iwd->scan.net_list, entry);
+   }
+
+   pclose(cmd_file);
+}
+
+static wifi_network_scan_t* iwd_get_ssids(void *data)
+{
+   iwd_t *iwd = (iwd_t*)data;
+   return &iwd->scan;
+}
+
+static bool iwd_ssid_is_online(void *data, unsigned idx)
+{
+   iwd_t *iwd = (iwd_t*)data;
+
+   if (!iwd->scan.net_list || idx >= RBUF_LEN(iwd->scan.net_list))
+      return false;
+
+   return iwd->scan.net_list[idx].connected;
+}
+
+static bool iwd_connect_ssid(void *data,
+      const wifi_network_info_t *netinfo)
+{
+   iwd_t *iwd = (iwd_t*)data;
+   char cmd[256];
+   int ret, i;
+
+   if (!iwd || !netinfo)
+      return false;
+
+   if (!iwd_is_daemon_running())
+      return false;
+
+   // stores ssid / passphrase as <ssid>.<type> file in /var/lib/iwd, e.g., my-ssid.psk
+   snprintf(cmd, sizeof(cmd),
+         "iwctl --passphrase \"%s\" station wlan0 connect \"%s\"",
+         netinfo->passphrase, netinfo->ssid);
+   if ((ret = pclose(popen(cmd, "r"))) == 0)
+   {
+      for (i = 0; i < RBUF_LEN(iwd->scan.net_list); i++)
+      {
+         wifi_network_info_t* entry = &iwd->scan.net_list[i];
+         entry->connected = strcmp(entry->ssid, netinfo->ssid) == 0;
+      }
+   }
+
+   return true;
+}
+
+static bool iwd_disconnect_ssid(void *data,
+      const wifi_network_info_t *netinfo)
+{
+   if (!iwd_is_daemon_running())
+      return false;
+
+   //netinfo->ssid
+   pclose(popen("iwctl station wlan0 disconnect", "r"));
+
+   return true;
+}
+
+static void iwd_tether_start_stop(void *a, bool b, char *c) { }
+
+wifi_driver_t wifi_iwd = {
+   iwd_init,
+   iwd_free,
+   iwd_start,
+   iwd_stop,
+   iwd_enable,
+   iwd_connection_info,
+   iwd_scan,
+   iwd_get_ssids,
+   iwd_ssid_is_online,
+   iwd_connect_ssid,
+   iwd_disconnect_ssid,
+   iwd_tether_start_stop,
+   "iwd",
+};
diff --git a/network/wifi_driver.c b/network/wifi_driver.c
index 70eed13eb1..b63b13ef52 100644
--- a/network/wifi_driver.c
+++ b/network/wifi_driver.c
@@ -50,6 +50,7 @@ const wifi_driver_t *wifi_drivers[] = {
 #endif
 #ifdef HAVE_WIFI
    &wifi_nmcli,
+   &wifi_iwd,
 #endif
    &wifi_null,
    NULL,
diff --git a/network/wifi_driver.h b/network/wifi_driver.h
index 0b3b3648f6..0ae63803d8 100644
--- a/network/wifi_driver.h
+++ b/network/wifi_driver.h
@@ -124,6 +124,7 @@ extern const wifi_driver_t *wifi_drivers[];
 
 extern wifi_driver_t wifi_connmanctl;
 extern wifi_driver_t wifi_nmcli;
+extern wifi_driver_t wifi_iwd;
 
 RETRO_END_DECLS
 
-- 
2.43.1

